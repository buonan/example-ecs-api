version: '3.9'

services:

  api:
    image: api
    ports:
      - 3000:3000
    networks:
      - frontend
      - backend
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
    depends_on:
      - mongo
      - kafka

  worker:
    image: worker
    networks:
      - backend
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
    depends_on:
      - mongo
      - kafka

  mongo:
    image: mongo:latest
    restart: always
    ports:
      - 27017:27017
      - 28017:28017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo_db:/data/db
    networks:
      - backend

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8082:8081
    depends_on:
      - mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_HEAP_OPTS: '-Xmx256M -Xms128M'
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - backend

networks:
  frontend:
  backend:

volumes:
  mongo_db:
  kafka_data:
  zookeeper_data:
  zookeeper_log: